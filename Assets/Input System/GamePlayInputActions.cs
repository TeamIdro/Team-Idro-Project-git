//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/GamePlayInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamePlayInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamePlayInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamePlayInputActions"",
    ""maps"": [
        {
            ""name"": ""Mage"",
            ""id"": ""34384080-95a8-4ee7-b837-6c9b9d4826ea"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2db25bd3-2c60-489d-8634-62826f44c8eb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""76cb9122-9b85-4e65-b315-4503e70a7c1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fd0eb405-bdad-4e41-8dec-9bd7316b831e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b215dc9-d36c-4847-89cd-92e10a0ff3aa"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""847c2256-8dbd-42ca-b1be-4212d1980f2e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a54890a0-643c-4927-b9e2-28006bbdf575"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""99cc971d-d9e8-4676-9424-350e64fc2390"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bae7dcc4-c315-47eb-8812-83096b75bcfc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4d2af373-63be-41d3-b7e8-3f0b37c2fe5b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Kid"",
            ""id"": ""e7016efa-623c-4599-ac4a-2efcd36abc43"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""1d5edb02-2c10-4d54-ab32-4f2d6ecd619e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""1389fd0e-c5f2-4818-a043-4c12c804665b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c3bf6e4-0ba2-4c5c-888c-13a3b999cf20"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""217ad8e1-4a4d-4942-b356-1caebd9a16b7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mage
        m_Mage = asset.FindActionMap("Mage", throwIfNotFound: true);
        m_Mage_Movement = m_Mage.FindAction("Movement", throwIfNotFound: true);
        m_Mage_Interaction = m_Mage.FindAction("Interaction", throwIfNotFound: true);
        m_Mage_Jump = m_Mage.FindAction("Jump", throwIfNotFound: true);
        // Kid
        m_Kid = asset.FindActionMap("Kid", throwIfNotFound: true);
        m_Kid_MouseClick = m_Kid.FindAction("MouseClick", throwIfNotFound: true);
        m_Kid_MousePosition = m_Kid.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mage
    private readonly InputActionMap m_Mage;
    private IMageActions m_MageActionsCallbackInterface;
    private readonly InputAction m_Mage_Movement;
    private readonly InputAction m_Mage_Interaction;
    private readonly InputAction m_Mage_Jump;
    public struct MageActions
    {
        private @GamePlayInputActions m_Wrapper;
        public MageActions(@GamePlayInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Mage_Movement;
        public InputAction @Interaction => m_Wrapper.m_Mage_Interaction;
        public InputAction @Jump => m_Wrapper.m_Mage_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Mage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MageActions set) { return set.Get(); }
        public void SetCallbacks(IMageActions instance)
        {
            if (m_Wrapper.m_MageActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MageActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MageActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MageActionsCallbackInterface.OnMovement;
                @Interaction.started -= m_Wrapper.m_MageActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_MageActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_MageActionsCallbackInterface.OnInteraction;
                @Jump.started -= m_Wrapper.m_MageActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MageActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MageActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MageActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MageActions @Mage => new MageActions(this);

    // Kid
    private readonly InputActionMap m_Kid;
    private IKidActions m_KidActionsCallbackInterface;
    private readonly InputAction m_Kid_MouseClick;
    private readonly InputAction m_Kid_MousePosition;
    public struct KidActions
    {
        private @GamePlayInputActions m_Wrapper;
        public KidActions(@GamePlayInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_Kid_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_Kid_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Kid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KidActions set) { return set.Get(); }
        public void SetCallbacks(IKidActions instance)
        {
            if (m_Wrapper.m_KidActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_KidActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_KidActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_KidActionsCallbackInterface.OnMouseClick;
                @MousePosition.started -= m_Wrapper.m_KidActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_KidActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_KidActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_KidActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public KidActions @Kid => new KidActions(this);
    public interface IMageActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IKidActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
